git是一种分布式版本控制系统
可以在每一台电脑中独立运行，同时为方便大家协作，有github和gitee这种共同平台给大家当作一个类似集中版本控制器的存在方便大家上传分支，但即使没有这样的远程库，git也能起到版本控制的作用。
正式库和临时存储区，在正式区的操作必须要添加add或移除rm后再提交才能传入git库
一个文件夹若需要作为git库，就必须先初始化git init
建议用空文件夹作为初始库
如果在正式库add至stage区后后悔了，就可以用git checout --撤销（参数忘记了）
如果是已经提交（commit)后想返回之前的版本，就先查询历史版本git log
可直接使用git set HEAD^返回上一版本，git set HEAD^^返回上上个版本，或通过git set HEAD*n返回上n-1个版本
当然也可以返回到未来的版本，只要记得未来版本的编号，可以通过git log及git （忘记命令了）查看操作记录
远程仓库：就是可以将本地库上传至github或gitee
以github为例：
首先需要先远程连接到github的某个库（一般是取同一个名字）
git remote add origin http://地址，默认使用origin，是默认的库名，如果既要上传github又要上传gitee就取不同的名字
比如git remote add gitee http://地址
    git remote add github http:/地址
新建后需要先初始化本地库至远程库
git push -u origin
如果需要从反操作，从远程库克隆库到本地，则使用git clone http://地址，网址有相关操作的说明
分支管理
     查看存储区状态git status
     查看分支 git branch
     切换并创建分支git checkout -b 分支名或git switch -c 分支名
     切换分支git switch 分支名
     那git branch 分支名是什么作用？忘记了！
     切换了分支后，在分支上做添加提交的东西，返回Master主分支做合并操作
     git merge 合并操作 如果是多个分支的做了修改，应该是要加分支名的，可做验证
     有可能会自动执行合并(fast forward)
     如果在分支做了修改提交，在master也做了同一个文件内容的修改提交，就有可能出现冲突conflict
     这样时候如果要做git merge（合并）那就需要先解决冲突
     查看git status和cat 文件名的就可以看到冲突在哪些地方，对冲突文件做修改后再提交就可以正常合并了
     一般master和dve分支是需要上传远程库的，master作为版本更新使用，dev做为开发分支，可供多人在这个分支上再创建分支，以便将各自的开发修改合并到dev分支上。
     要暂存手头上的进行中的分支可使用git stage 保存名称 暂时保存下来，处理完紧急的修改后，再通过git 名称恢复（命令不是很清晰，待更正）
     git的命令可以使用全局变量做缩写，比如使用st表示status，用lg来查看分支时间线具体，这些自定义的全局变量也可以直接通过操作git config文件来写入删除。
     -----------------------------------
     如果是个人学习凭印象做的笔记，问题点大多是命令记忆不准确，需要更正
     下面将根据廖雪峰大神的官方网站内容做学习笔记
     -----------------------------------
     1.1 安装git
     	 linux系统上直接输入git 查看是否已安装git
	 如果是Debian或Ubuntu，通过sudo apt-get install git 可完成git安装
	 老的使用sudo apt-get install git-core
	 其它版本可通过源码安装，至官网下载源码，依次输入./conig,make,sudo make install完成安装
	 Max OS X系统
	 方法一：安装homebrew，通过homwbrew安装Git
	 方法二：从AppStore安装Xcode，运行Xcode选择菜单Xcode-》Preferences找到Download选择Command line Tolls点Install完成安装
	 Windows系统
	 官网或国内镜像下载安装程序，然后找到Git Bash就是命令行工具了。
	 ---------》
	 最后一步设置全局用户名：
	 个人的用户可用个人用户名和邮箱
	 公司的用户可用公司用户名和邮箱-这样方便区分是由哪个本地库做的变更
	 这个用户名和邮箱并不是远程库(github or gitee)的用户名和密码，只是在本地库使用的，可以随便定义
         命令：
	 git config --global user.name “用户名”
	 git config --global user.email "邮箱名“
	 查看命令：git config user.name
	           git config user.email
          说明：global这个参数是对当前用户起作用的，如果不加，则只对当前仓库起作用
	  配置文件存放在.git/config文件中  可通过cat .git/config查看,经过验证发现这个文件里不存在用户名和邮箱名的设置，有别名的设置。
	  也可以直接通过修改该文件内容添加全局变量和删除变量
          别名--懒人必备技巧
	  实例：
	  git config --global alias.st status
	  git config --global alias.co checkout
	  git config --global alias.ci commit
	  git config --global alias.br branch
	  也可以根据命令的实用效果来取别名
	  比如命令git reset HEAD file 可以把暂存区的修改撤销掉（unstage)，重新返回工作区，那可以设置如下
	  git config -- global alias.unstage 'reset HEAD'
	  设置一个git last 用于显示最后一次提交信息
	  git config -- global alias.last 'log -1'
	  还可以设置很复杂的命令给别名
	  git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
	  只要能想到的操作，都可以自定义别名，但别名是不是能重复的。
	  可以通过编辑.git/config文件来操作
      1.2 創建版本庫
          版本庫：repostiory
	  mkdir 庫名
	  cd 庫名
	  pwd
	  確認版本庫所在路徑，這樣創建的版本庫就是空的，pwd命令用于顯示當前目錄
	  為確保不出現莫名其妙的問題，建議使用純英文路徑，所有方便夾都使用英文
	  跳到需要創建版本庫的當前目錄中，進行初始化作業
	  git init
	  git就會創建一個空的倉庫，可以通過ls -ah查看是否已創建.git目錄確認是否已創建成功
	  不要使用公司的項目作為公開的git庫
	  文本建議TXT格式的標準UTF-8編碼，以便跨平臺使用。
	  window平臺可以使用notepad++設置編碼方式為UTF-8 with out BOM
      1.3 添加文件
          git add 文件名
	  git commit -m "提交時附帶的信息"
      2.1 版本回退
          git log ##查看日誌
	  git log --pretty=oneline ##單行顯示日誌
          HEAD表示当前版本，上一个版本就是HEAD^,上上个版本就是HEAD^^,上100个版本就写成HEAD~100
	  回退到上一个版本命令：
	  git reset --hard HEAD^
	  如果要回到未来的某个版本，就必须知道那个版本的commit id，commit类似于快照，每一次提交就是一个记录点。
	  未来版本号可以通过git log 或git reflog来查询对应的commit id
          区别：git log是查看提交的历史，当天没有关闭命令行都有效
	        git reglog是用来查看命令历史，只要使用过的历史都能查看到
      2.2 工作区和暂存区
          Working Directory Stage Directory
	  .git文件夹是一个版本库，在这个版本库中存了很多东西，其中最重要的就是stage(index)的暂存区，git会自动创建主分支Master
	  git status可查看状态，如果暂存区是干净的，则表示工作区的文件没有变更，如果变更过，暂存区就会有内容，比如加了一个文件，但还没有提交时。
          如果在添加一个文件后，没有提交前又做了其它更改，那就可能导致冲突conflict，这时可以通过对比找出冲突的地方，修改后再添加保存即可。
	  git diff HEAD --文件名，可以查看当前版本与最后提交的版本之间的差异
	  连续做过修改的文件，建议是将添加及提交连在一起使用，这样不容易导致冲突和差异。
	  撤销
	  git checkout --文件名  ##该命令可以将这个文件名在工作区的所有修改全部撤销，这个撤销有两种情况，一个是回到commit之前，一个是回到add之前，要看修改的时候是否提交。
	  这个命令一定要加后面的--file参数，否则就会变成切换分支命令！要养成好的习惯就是，切换分支命令时使用switch，以免给自己造成困扰，撤销的时候一定要记得加文件名。
	  如果修改已经添加到暂存区了，可以用git reset HEAD<file>将暂存区的修改撤销掉，重新回到工作区。
	  git reset命令既可以回退版本，也可以撤销在暂存区的修改回到工作区。
	  取消工作区的修改使用git checkout --filename
	  养成习惯，在工作区做了修改，及时回顾确认后再使用add commit比较稳妥，在工作区要撤销修改，只需要git checkout--filename
	  如果已经添加到暂存区了，使用git reset HEAD<filename>回到工作区，再将工作区的修改撤销。
	  如果已经提交到版本库了，那就需要使用git reset HEAD^或commit id返回上一个或指定版本库了。
          删除文件
	  git rm filename.suffix
	  如果添加到版本库后，做了删除操作，那就可以用git checkout-filename恢复误删除的文件，但没有添加至版本库的文件是不能恢复的！所以删除操作要比添加操作更加谨慎一点，删除之前最好先添加到版本库里，或先确认是否已经存在可恢复的版本了。
	  远程仓库-github gitee
          SSH加密管理
	  创建ssh key
	  ssh-keygen -t rsa -C "邮箱名“
	  在.ssh目录里，有id_rsa和id_rsa.pub两人个文件，这就是SSH Key的秘钥对，id_rsa是私钥，不能泄露，id_rsa.pub是公钥，可以放心告诉别人。
	  登陆github 在Account Setting->SSH Keys界面，将公钥内容。粘贴进去
	  提醒：因为github是开放的，不要把敏感信息写入。
          添加远程仓库：
	  先在github中创建一个新的仓库,然后根据提示把本地的git仓库推送到远程仓库上
	  git remote add origin 远程仓库地址
	  这条命令中的origin是默认的远程库叫法，如果需要同时同步一个本地库至github及gitee（码云）,可以自定义这个远程库的名称，以便指定推送至不同的远程库中。
	  第一次推送时，需要加一个-u的参数
	  git push -u origin master
	  -u参数可以把master分支分部内容推送至远程库，并与远程的master分支关联起来，第二次推送的时候就不必加这个参数了，可以简写如下
	  git push origin master
	  如果不是推送主分支，则修改master为对应分支名，如果远程库是自定名也需要做相应的修改
	  从远程库克隆至本地库
	  git clone 远程库地址
	  要使用SSH命令的格式做推送就必须先做好公钥和私钥，以便能够使用SSH通信。
     2.3  管理修改，撤销修改，删除文件
          所谓修改是包括増加，变更文件内容，新増文件，删除文件等
	  多次修改，在最后一次都需要添加文件（add/rm）删除文件操作后再提交一次git commit这样才能保证所有的修改都是能提交
	  如果两次修改是对同一个文件做的，那可以通过命令查看工作区与版本库里最后版本同一个文件的区别
          git diff filename：比较工作区和暂存区	  
	  git diff HEAD -- filename:比较工作区和版本库的最新版本 
	  通过上个命令确认是否所有的修改都已经是最新的，以便重新添加修改和提交。
          git checkout --filename 这个命令是把文件在工作区的修改全部撤销，分两种情况
	  一种是文件自修改后还没有被放到暂存区，现在，撤销修改就回到了与版本库一一模一样的状态
	  一种是文件已经添加到暂存区后，又做了修改，现在，撤销修改就回到了添加到暂存区后的状态
	  无论是哪种情况，都是回到最近一次的git commit or git add 时的状态
	  这个命令中的--很重要，如果没有写就会 变成切换分支命令，所以建议切换分支命令要养成使用git branch的习惯，否则习惯形成了就容易搞混淆。
	  如果整个提交到暂存区的修改都不需要了，要回到工作区的状态，则使用命令 git reset HEAD filename 把暂存区的修改撤销掉，重新放回工作区
	  git reset命令既可以回退版本，又可以把暂存区的修改回退到工作区。当我们使用HEAD时表示最新的版本
	  如果要把工作区的修改丢弃，则需要使用git checkout -- filename
	  只要还没有提交到远程库中，在本地做的修改要后悔都是来得及的！！
	  小结：
	  场景1：当你改乱了工作区的某个文件的内容，想直接丢弃工作区的修改时，使用命令git checkout -- filename
	  场景2：当你不但改乱了工作区的某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步，用git reset HEAD filename 回退到场景1，按场景1处理
	  场景3：如果已经提交到了版本库，则只能回退版本，但是已经提交过的修改是会被记录的，无法掩盖，所以推送到远程库前一定记得确保修改的正确性，特别是公司的项目
               附录： 2.1 版本回退
          git log ##查看日誌
          git log --pretty=oneline ##單行顯示日誌
          HEAD表示当前版本，上一个版本就是HEAD^,上上个版本就是HEAD^^,上100个版本就写成HEAD~100
          回退到上一个版本命令：
          git reset --hard HEAD^
          如果要回到未来的某个版本，就必须知道那个版本的commit id，commit类似于快照，每一次提交就是一个记录点。
          未来版本号可以通过git log 或git reflog来查询对应的commit id
          区别：git log是查看提交的历史，当天没有关闭命令行都有效
                git reglog是用来查看命令历史，只要使用过的历史都能查看到
	  删除文件使用git rm filename 如果误删除了文件可以使用git checkout -- filename 从版本库中还原被误删除的文件，只有同步到版本库的文件可以使用这个方法还原。
       3.1 添加到远程仓库
           远程仓库现在有两个常用的github&gitee，如果需要建立自己的git远程仓库，则需要找一台自己的服务器建立自己的远程仓库
	   实例中以github为例  注册github的帐号后，Create a new reop
	   命令：git remote add origin git@github.com:用户名/项目名.git
	   使用如上命令在本地关联远程库，按照这个命令关联的时候，远程库名就叫这个默认的origin，如果有多个远程库的时候，就可以自定义这个远程库名
	   关联后第一次将本地库所有内容推送到远程库上命令如下：
	   git push -u origin master
	   实际上就是把当前的主分支推送上去，因为远程库是空的，所以带上-u参数，这样不仅能推送master分支，也能将本地master分支与远程的master分支关联起来，以后推送时就不必带这个-u参数了
	   git push origin master
	   备注：远程库的地址如果不是使用ssh的方式，也可以使用url形式的地址
           比如：git remote add origin  https://github.com/charm215451758/learngit.git
       3.2 从远程库克隆
           要将一个远程库克隆到本地，使用如下命令
	   git clone git@github.com:用户名/库名.git
	   同样可以使用https协议的url克隆，不过使用ssh协议是原生的，速度最快，建议能使用ssh时就使用ssh协议。
       4.1 创建与合并分支
           HEAD指针指向分支branch,比如主分支master，分支指向time point ，这样串起来的就是一个时间线，如果在某个时间点出现了一个新的分支branch，HEAD就会指向新的分支，这时候做的修改，只是在分支上进行的，并不会影响主分支 master。
	   如果要合并分支，就将master指向当前分支的提交，并将HEAD指针返回到master上，这时候两个分支就是一样的内容了，即使这时候将新建的分支删除，也不会影响master里已经合并的内容。
	   实例：
	   1.创建分支dev，然后切换到分支dev上,命令有两条，推荐使用switch
	   git checout -b dev
	   git switch -c dev--推荐
	   -b参数表示创建并切换，相当于以后两条命令
	   git branch dev
	   git checkout dev
	   查看分支信息
	   git branch
	   星号标记会指明当前所在分支是哪一个
	   切换分支命令：有两条，推荐使用switch
	   git checkout master 
	   git switch master --推荐
	   合并命令
	   git merge 分支名
	   如果显示fast-forward则表示是快速合并
	   删除分支命令
	   git branch -d 分支名
       4.2 解决冲突
           当两个分支分别有不同的修改时，就会导致冲突而无法使用git merge命令进行快速合并
	   如果尝试使用合并命令则会收到系统提示信息，标明conflict发生在哪些文件上，通过状态查询命令git status也可以 看到具体的信息
	   通过 cat命令查看冲突文件里可以看到<<<<< ===== >>>>>>标记的不同分支上的内容，修改之后再git add git commit之后才能再次执行合并命令git merge
	   冲突合并后的分支情况可以通过如下命令查看
	   git log --graph -- pretty=oneline --abbrev -commit
       4.3 分支管理策略
           通常使用快速合并分支时，删除的分支信息会被丢失，无法通过git log查看到
	   为了方便追溯历史，需要使用命令开关来强制保留分支信息，哪怕之后删除了也能看到
	   比如现在这个feature1分支是新建在dev分支之下的，在这个分支上我新建了这个分支管理策略的章节
	   一会合并时就使用开关保留这次的分支合并信息
	   合并命令如下：
	   git merge --no-ff -m ""注释信息” 分支名称
	   实例
	   git merge --no-ff -m "新建章节-分支管理策略 dev

